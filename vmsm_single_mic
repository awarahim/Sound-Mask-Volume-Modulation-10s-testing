#!/usr/bin/python3
# -*- coding:utf-8 -*-
import pyaudio
import wave

import signal
import sys

import multiprocessing as mp

import numpy as np
import time
from subprocess import call

from datetime import datetime
import wave

import csv

# Stop signal handler by Ctrl-C
stop_event = mp.Event()
# with SSH it doesnt wokrk :(

# Constants for audio devices
FORMAT  = pyaudio.paInt16    # 24-bit the mic is 24-bit with sample rate of 96kHz
CHANNELS = 1                 # number of audio streams to use. Since there is one speaker and one mic, use 2 streams
RATE = 48000                # 48kHz since mic is specific at 48kHz
FRAMES_PER_BUFFER = 1024    # number of frames the speaker is taking in 

# helper functions
def clear(q):
    "Clear the queue for better microphone stopping"
    trigger = True
    while trigger:
        q.get_nowait()
        if q.empty():
            trigger = False

# calculate RMS of data chunk
def rms(data):
    if len(data) == 1: return print('data length =1')
    fromType = np.int16
    d = np.frombuffer(data,fromType).astype(np.float) # convert data from buffer from int16 to float to calculate rms
    rms = np.sqrt(np.mean(d**2))
    return abs(int(rms))
    
    
##### Functional functions ######
    
def error_mic(q1, stop_event):
    p = pyaudio.PyAudio()
    print('error mic running...')

    err_data = [] # need to cast to int16
    
    def callback2(in_data, frame_count, time_info, status):
        data = rms(in_data)
        q1.put(data)
        err_data.append(data)
#         print(q1.qsize())

        return in_data, pyaudio.paContinue
        
    stream = p.open(
        format=FORMAT,
        channels=CHANNELS,
        rate=RATE,
        frames_per_buffer=FRAMES_PER_BUFFER,
        input=True,
        input_device_index=1,
        stream_callback = callback2)
            
    while not stop_event.wait(0.5): # data coming in is really fast, use 1s for the wait
        # start stream
        stream.start_stream()    
    if stop_event.wait(1):
       clear(q1)
       
    stream.stop_stream()
    print('error mic is stopped')
    stream.close()



#######################################################################################################################################    
# Second Thread for simultaneous calculate the moving average of compiled RMS values
def moving_average(q1, q2, stop_event, window= 10):
    err = []    
    print('Initial Q1 Q2 size:', q1.qsize(), q2.qsize())

    if q1.qsize()> 0:  #check if the qs are not empty
        print('Moving Average Started')        
        # Put first Window-1 to be the same number as non-averaged rms number
        for n in range(0,window):
            err.append(q1.get())
            q2.put(err[n])
                
        #Calculate the mean of first (window)
        Mprev_err = np.mean(err)
        
        # Put the means at the window'th position
        q2.put(Mprev_err)
        print("done first window")

        #empty buffer
        err = []        
        
        while not stop_event.wait(0.1):
#             print("I'm in")
            Q1_get = q1.get()
#             print('Q1 taken:', Q1_get)
            # Calculate next one step window of the data
            Mnew_err = Mprev_err + (Q1_get - Mprev_err)/window
 
            # New mean becomes the previous mean
            Mprev_err = Mnew_err

            # Save the data in the respective queues
            q2.put(Mprev_err)
#             print(q2.get()) check termination
#             print('Q2 size in moving average:', q2.qsize())

    print('Moving Average Stopped')
    
    
    
    
#####################################################################################################################
# Third Thread for simultaneous volume modulation

def vol_diff_calibrate(q2,stop_event, duration=100):
   
    buffer = []

    print('calibrating...', datetime.now())

    for _ in range(0,duration):
#         print('Q2 size in calibrate:', q2.qsize())
        err_signal = q2.get()
#        print('err_signal') # need to see the fluctuation of signal of the same volume level which will determine the margin for comparator function
        buffer.append(err_signal)
        
#    mean = abs(np.mean(buffer)) # must only give positive threshold
    min = abs(np.min(buffer[10:]))
    max = abs(np.max(buffer[10:]))
    print('min:', min, 'max:', max)
    
#    vol_threshold = round(mean)
#    print('done calibrated threshold:', vol_threshold)

    return min, max

def main_volume_modulation(q2, delta, volume_value, stop_event,min_threshold,max_threshold, duration, W=10):
    file = datetime.now().strftime('%b_%d_%H_%M_%S_VMSM_single_mic.csv')
       
    min_threshold.value,max_threshold.value = vol_diff_calibrate(q2, stop_event, duration)
    
    time.sleep(20) # wait till q2 is filled again after calibration
    current_volume = volume_value.value # initializes current volume
#     print('initial Q2 size:', q2.qsize())
    min_size = 5
    
    print('volume modulation started')
    start = time.time()
    while not stop_event.wait(0.1):
#         print('Q2 size:', q2.qsize())
    # Check if the signal decrease/increase consistently for the first 5 get, then trigger comparator to change volume
        temps = []
        for _ in range(min_size+1):
            temps.append(q2.get())
        print(len(temps))
        # Classify conditions
        for i in range(len(temps)-1):
            # Decreasing
            if temps[i] > temps[i+1]:
                temps[i] = 1
            # Increasing
            elif temps[i]< temps[i+1]:
                temps[i] = 0
            else: # temps[i]==temps[i+1]:
                temps[i] = 2
                
        print(temps, sum(temps[0:min_size])) # only take the first min_size element
        
        # Trigger volume change based on conditions met
        if (sum(temps[0:min_size]) == min_size) or (sum(temps[0:min_size]) == 0):
            # Change volume
            err_signal = q2.get()
            delta = delta # The larger this number, the longer it should take to reach the target volume
            nu = abs(err_signal / delta) # "Learning rate" / "sensitivity" of volume adjustment
            volume_value.value = comparator(file, err_signal, current_volume, W, min_threshold.value,max_threshold.value, nu)                
            current_volume = volume_value.value # set the "current_volume" in modulating_volume function into new_volume because we always get 21, 19, 20
            temps = []
#            min_threshold.value,max_threshold.value = vol_diff_calibrate(q2,stop_event, duration)
        else:
            temps = []
            continue
        if time.time()-start > 60:
           min_threshold.value, max_threshold.value = vol_diff_calibrate(q2,stop_event,duration)
           start = time.time()

    print('volume modulation stopped')
    
def comparator(file, signal, current_vol, window, min_threshold,max_threshold, nu):
    # nu : the step size of volume being increased or decreased, in percent, ex: 1 = 1%
    # v_threshold : upper limit of the difference between the mics values
    # return: new volume
    # new volume must not be more than 100 and less than 10
        
    # signal within the buffer range
    if signal >=(min_threshold)  and signal <= (max_threshold): # since the calibrated threshold is a single point, impossible to get the exact number again, we must do a plus/minus value
       new_vol = current_vol
       print('same baseline, calc volume:', new_vol, 'difference', signal)
 
    elif signal < min_threshold: # signal decreased in amplitude above buffer range
        new_vol = current_vol + nu
        print('ref smaller, calc volume:', new_vol, 'difference:', signal)
    
    elif signal > max_threshold: # signal increased in amplitude above buffer range
        new_vol = current_vol - nu
        print('error smaller, calc volume:', new_vol, 'difference', signal)


    # Limit volume to be always positive
    if new_vol < 0:
        new_vol = 0
# 
#     elif new_vol > 100:
#         new_vol = 100
# #         print('volume maxed to 100')
        
    #   save data of volume difference in csv file
    file = open(file,'a')
    writer = csv.writer(file)
    writer.writerow([time.time(), signal, new_vol])
    file.close()
    
    return new_vol
################################################################################################################################################    
# Generating White Noise, y(n)

# NONBLOCKING MODE    
def whitenoise(volume_value, stop_event):
    
     ##### minimum needed to read a wave #############################
     # open the file for reading.
    WF = wave.open('BrownNoise_60s.wav', 'rb')
    
    
#     print('volume value', volume_value.value)
     
    def callback_speaker(in_data, frame_count, time_info, status):
#          volume_value.value = (volume_value.value + 1) % 100
         data = WF.readframes(frame_count)
#         tic = time.time()
         data = set_volume(data,volume_value.value)
#         toc = time.time() - tic
#         print('time taken to set volume:', toc)
         return data, pyaudio.paContinue
     
     #create an audio object
    p2 = pyaudio.PyAudio()
     
     # open stream based on the wave object which has been input
    stream3 = p2.open(format=p2.get_format_from_width(WF.getsampwidth()),
                     channels = WF.getnchannels(),
                     rate = WF.getframerate(),
                     output=True,
                     output_device_index=0,
                     stream_callback=callback_speaker)
#     
#     
     # start stream
    while not stop_event.wait(1):
        stream3.start_stream()         
         # control how long the stream to play
        time.sleep(10)
        WF.rewind()  
         
    stream3.stop_stream()

    # cleanup stuff
    stream3.close()
     
    WF.close()
      
    print('Speaker completely stopped at ', datetime.now())
    
    
    
def set_volume(datalist,volume):
    """ Change value of list of audio chunks """

    if volume >= 0 and volume <= 100: #only changes the volume when volume is within [0,100]
    
        sound_level = (volume / 100.)
            
        fromType = np.int16
        chunk = np.frombuffer(datalist,fromType).astype(np.float) 

        chunk = chunk * sound_level
    #     print(chunk)
        
        datalist = chunk.astype(np.int16)
    #     print(datalist)
#     elif volume < 0:
#         sound_level = (5/100.0)
#         fromType = np.int16
#         chunk = np.frombuffer(datalist,fromType).astype(np.float)
#         chunk = chunk*sound_level
#         datalist = chunk.astype(np.int16)
    
#     elif volume > 100:
#         sound_level = (100/100.)
#         fromType = np.int16
#         chunk = np.frombuffer(datalist,fromType).astype(np.float)
#         chunk = chunk*sound_level
#         datalist = chunk.astype(np.int16)
        
    return datalist


###########################################################################################
def stop(signum, frame):
    global stop_event
    print('KeyboardInterrupt ', datetime.now())
    stop_event.set()


############################# Main code ###################################################
def thread_mask():    

    # os shutdown
    #signal.signal(signal.SIGTERM, stop)
    # ctrl-c
    signal.signal(signal.SIGINT, stop)
    
    print('Enter window size:')
    window = int(input())
#     print('Enter max_size:')
#     maxsize = int(input())
    print('Enter delta:')
    delta = int(input())
    
    min_threshold = mp.Value('d', 100.0) # initial value of threshold value
    max_threshold = mp.Value('d',300.0) 

    calibrate_duration = 200 # data points
    volume_value = mp.Value('d', 30.0)
    
    q1 = mp.Queue()
    q2 = mp.Queue()
    
    print('Start at ', datetime.now())
    

    p1 = mp.Process(target=error_mic, args=(q1,stop_event))
    p2 = mp.Process(target=whitenoise, args=(volume_value, stop_event))
    p3 = mp.Process(target=moving_average, args=(q1, q2, stop_event, window))
    p4 = mp.Process(target=main_volume_modulation, args = (q2, delta,volume_value, stop_event,min_threshold,max_threshold, calibrate_duration, window))
    
    p1.start()
    p2.start()
    time.sleep(10)
    p3.start()
    time.sleep(20)
    p4.start()
    
    
    p1.join()
    p2.join()
    p3.join()
    p4.join() 

    print('Ended at ', datetime.now())
    
#######################################################################################################
   
if __name__ == '__main__':
    thread_mask()
    


## Notes
    # timeout for stop_event.wait(0.1) must be the same for all functions for volume modulation to not have pre-termination.
    # Does timeout cause data to be collected every 0.1s or previously 0.5s? Yes. and stop_event.wait(cannot be blank) 

    # Moving Average is slower at putting into q2 than Volume modulation
    # - volume modulation consume 6 q2.get() within _ s, whereas Moving average is putting 1 q2.put() every __ s

